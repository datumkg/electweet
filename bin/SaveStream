#!/usr/bin/env python
import sys
import json

usage = """Usage: ./SaveStream outputPrefix [-w wordfile1,wordfile2,..] [-c credfile.json]"""

if len(sys.argv) < 2:
    print(usage)
    sys.exit(0)

argc = 1
outf = sys.argv[argc]
argc += 1

words = ['@HillaryClinton','@BernieSanders']

if len(sys.argv) > argc and sys.argv[argc] == '-w':
    wordFiles = sys.argv[argc+1].split(',')
    words = [x.strip() for f in wordFiles for ln in open(f) for x in ln.split(",")]
    argc += 2

print(words)

credFile = 'data/credentials.json'
if len(sys.argv) > argc and sys.argv[argc] == '-c':
    credFile = sys.argv[argc+1]

crd = json.load(open(credFile))

def outputData(data):
    print(str(data))

from tweepy.streaming import StreamListener
from tweepy import OAuthHandler
from tweepy import Stream

class ElectionStreamListener(StreamListener):
    def __init__(self,outf):
        self.outputCount = 0
        self._outf = outf
        self.dataList = []
        self.wantedAttributes = ['text','created_at','geo','place','favorite_count','coordinates','timestamp_ms',
                                 'entities','retweet_count','id_str','in_reply_to_screen_name','quoted_status','lang',
                                 'source','user']

    def formatData(self,data):
        outp = json.loads(data)
        #outp = {attr:outp[attr] for attr in self.wantedAttributes if attr in outp}
        return outp

    def writeToFile(self):
        of = open(self._outf+str((self.outputCount/10000+1)*10000)+'.json','w')
        json.dump(self.dataList,of)
        of.close()

    def outputData(self,data):
        data = self.formatData(data)
        self.dataList.append(data)
        if len(self.dataList) % 50 == 0:
            self.writeToFile()
        if len(self.dataList) == 10000:
            del self.dataList
            self.dataList = []

    def on_data(self,data):
        self.outputData(data)
        self.outputCount += 1
        if self.outputCount % 1 == 0:
            print("Got "+str(self.outputCount)+" tweets")
        return True

    def on_error(self, status):
        print status


start_count = 0
while True:
    print("Starting streaming")
    l = ElectionStreamListener(outf+"_"+str(start_count))
    auth = OAuthHandler(crd['consumer_key'], crd['consumer_secret'])
    auth.set_access_token(crd['access_token'], crd['access_token_secret'])
    stream = Stream(auth, l)
    try: 
        stream.filter(track=words)
    except KeyboardInterrupt:
        print("Exiting because of keyboard issue")
        raise
    except:
        l.writeToFile()
        start_count += 1
        print("Unexpected error: "+str(sys.exc_info()))



















